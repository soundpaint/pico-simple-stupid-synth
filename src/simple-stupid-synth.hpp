/*
 * I2S Audio Target of Simple Stupid Synthesizer
 *
 * Copyright (C) 2023 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint>
 *
 * Author's web site: www.juergen-reuter.de
 */

#ifndef SIMPLE_STUPID_SYNTH_HPP
#define SIMPLE_STUPID_SYNTH_HPP

#include <inttypes.h>
#include "imidi-event-listener.hpp"
#include "midi-state-machine.hpp"
#include "audio-target.hpp"

class Simple_stupid_synth : public IMidi_event_listener
{
public:
  static const uint32_t DEFAULT_SAMPLE_FREQ; // [HZ]
  MIDI_state_machine *_midi_state_machine; // FIXME: Should be a
                                           // private constant member.
  Simple_stupid_synth(Audio_target *const audio_target);
  void midi_note_off(const uint8_t channel, const uint8_t key,
                     const uint8_t velocity);
  void midi_note_on(const uint8_t channel, const uint8_t key,
                    const uint8_t velocity);
  void midi_notes_change_velocity(const uint8_t key,
                                  const int8_t delta_velocity);
  void midi_polyphonic_pressure(const uint8_t channel, const uint8_t key,
                                const uint8_t velocity);
  void midi_control_change(const uint8_t channel,
                           const uint8_t controller, const uint8_t value);
  void midi_program_change(const uint8_t channel, const uint8_t program);
  void midi_channel_pressure(const uint8_t channel, const uint8_t velocity);
  void midi_pitch_bend_change(const uint8_t channel,
                              const uint8_t lsb, const uint8_t msb);
  void midi_all_sound_off(const uint8_t channel);
  void midi_reset_all_controllers(const uint8_t channel, const uint8_t value);
  void midi_local_control_off(const uint8_t channel);
  void midi_local_control_on(const uint8_t channel);
  void midi_all_notes_off(const uint8_t channel);
  void midi_omni_mode_off(const uint8_t channel);
  void midi_omni_mode_on(const uint8_t channel);
  void midi_mono_mode_on(const uint8_t channel, const uint8_t numberOfChannels);
  void midi_poly_mode_on(const uint8_t channel);
  void midi_time_code_quarter_frame(const uint8_t msg_type,
                                    const uint8_t values);
  void midi_song_position_pointer(const uint8_t lsb, const uint8_t msb);
  void midi_song_select(const uint8_t select);
  void midi_tune_request();
  void midi_timing_clock();
  void midi_start();
  void midi_cont();
  void midi_stop();
  void midi_active_sensing();
  void midi_reset();
  void main_loop();
private:
  static const double OCTAVE_FREQ_RATIO;
  static const uint8_t NOTES_PER_OCTAVE;
  static const double A4_FREQ; // freqency of concert pitch [Hz]
  static const uint8_t A4_NOTE_NUMBER; // MIDI note number of concert pitch
  static const uint8_t COUNT_HEADROOM_BITS;
  static const uint8_t VOL_BITS;
  static const uint32_t COUNT_INC;
  typedef struct {
    uint32_t count_wrap;
    uint32_t count;
    uint16_t velocity;
    int16_t elongation;
  } osc_status_t;
  osc_status_t _osc_statuses[Midi_constants::NUM_KEYS];
  Audio_target *const _audio_target;
  const bool _is_stereo;
  void osc_init(const uint32_t sample_freq);
  static inline int16_t do_limit(const int16_t elongation,
                                 const uint16_t limit);
  void synth_task();
};

#endif /* SIMPLE_STUPID_SYNTH_HPP */

/*
 * Local variables:
 *   mode: c++
 *  coding: utf-8
 * End:
 */
