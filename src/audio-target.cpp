/*
 * Audio Target of Simple Stupid Synthesizer
 *
 * Copyright (C) 2023 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include "audio-target.hpp"
#include "pico/stdlib.h"
#include "pico/audio.h"

Audio_target::Audio_target(const uint32_t sample_freq)
{
  _target_audio_format.sample_freq = sample_freq;
  _target_producer_pool = 0;
}

Audio_target::~Audio_target()
{
  if (_target_producer_pool) {
    // TODO: Deallocate.
    _target_producer_pool = 0;
  }
}

uint32_t
Audio_target::get_sample_freq() const
{
  return _target_audio_format.sample_freq;
}

struct audio_buffer *
Audio_target::take_audio_buffer(const bool block)
{
  return ::take_audio_buffer(_target_producer_pool, block);
}

void
Audio_target::give_audio_buffer(audio_buffer_t *audio_buffer)
{
  ::give_audio_buffer(_target_producer_pool, audio_buffer);
}

/*
 * Local variables:
 *   mode: c++
 *  coding: utf-8
 * End:
 */
