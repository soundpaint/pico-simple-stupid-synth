/*
 * PWM Audio Target of Simple Stupid Synthesizer
 *
 * Copyright (C) 2023 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include "pwm-audio-target.hpp"
#include "pico/stdlib.h"

PWM_audio_target::PWM_audio_target(const uint32_t sample_freq,
                                   const uint8_t gpio_pin_pwm_mono)
  : Audio_target(sample_freq, false)
{
  _target_audio_config_mono.core.base_pin = gpio_pin_pwm_mono;
}

PWM_audio_target::PWM_audio_target(const uint32_t sample_freq,
                                   const uint8_t gpio_pin_pwm_left,
                                   const uint8_t gpio_pin_pwm_right)
  : Audio_target(sample_freq, true)
{
  _target_audio_config_l.core.base_pin = gpio_pin_pwm_left;
  _target_audio_config_r.core.base_pin = gpio_pin_pwm_right;
}

PWM_audio_target::~PWM_audio_target()
{
}

void
PWM_audio_target::init(const uint16_t buffer_count,
                       const uint16_t buffer_sample_count,
                       const enum audio_correction_mode mode)
{
  const int32_t max_latency_ms = -1; // don't care
  _target_producer_pool =
    audio_new_producer_pool(&_target_audio_buffer_format,
                            buffer_count, buffer_sample_count);
  const struct audio_format *output_audio_format =
    is_stereo() ?
    audio_pwm_setup(&_target_audio_format, max_latency_ms,
                    &_target_audio_config_l,
                    &_target_audio_config_r) :
    audio_pwm_setup(&_target_audio_format, max_latency_ms,
                    &_target_audio_config_mono);
  if (!output_audio_format) {
    panic("unable to open audio device for selected audio format\n");
  }
  const __unused bool ok =
    audio_pwm_default_connect(_target_producer_pool, false);
  if (!ok) {
    panic("failed connecting PWM to producer pool");
  }
  audio_pwm_set_enabled(true);
  audio_pwm_set_correction_mode(mode);
}

/*
 * Local variables:
 *   mode: c++
 *  coding: utf-8
 * End:
 */
